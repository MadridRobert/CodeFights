char firstNotRepeatingCharacter(String s) {
    int len = s.length();
    int i, j; j = i = 0;
    int[][] f = new int[26][2];
    

    for (i = 0; i < len; i++){

        j = (int)s.charAt(i)-(int)'a';
        f[j][0] += 1; // how many times it found the letter
        if (f[j][1] == 0) {
            // store the first index only once per letter
            f[j][1] = i+1; // + 1 to avoid storing 0, deduct later
        }
    }
    j = len + 1; // set a value larger than 27 as the smallest
    // any index if found should be (len to 1)-1, thus smaller
    for (i = 0; i < 26; i++){
        if (f[i][0] == 1){
            if (f[i][1] < j){
                j = f[i][1];
            }
        }

    }
    if(j < (len + 1)) {
        // if it found a non repeating char
        // print the first index where found
        return s.charAt(j-1);

    }

    return '_';

}

// SOLUTION 2, O(1) Memory, 1 loop only
char firstNotRepeatingCharacter(String s) {
    // THIS SOLUTION TRAVERSES STRING ONLY ONCE
    // IT ONLY HAS ONE LOOP, AND IT USES O(1) MEMORY
    // IT HAS O(1) MEMORY ACCESS FOR FINAL ANSWER
    // 
    // VOTE FOR MY SOLUTION
    
    int len, r, i, n;
    int[] f = new int[26];
    len = s.length();
    r = len - 1;
    // travel the string only once in reverse
    for (i = (len - 1); i >= 0; i--){
        n = (int)s.charAt(i)-(int)'a';
        // find the next index where letter count is 1
        // make sure that next letter is not the same
        if(((f[n] += 1) == 1) 
           // prevent out of bound index
           // check if letter is repeated next to itself
           && i > 0 && s.charAt(i) != s.charAt(i-1) ){
            r = i;
        }
    }
    // if the last letter that was found is not repeated, return
    if (f[((int)s.charAt(r)-(int)'a')]==1){ 
        return(s.charAt(r));
    } 
    // else return default character
    return '_';

}
